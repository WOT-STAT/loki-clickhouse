/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: loki.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace loki {
    export class PushRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            streams?: StreamAdapter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("streams" in data && data.streams != undefined) {
                    this.streams = data.streams;
                }
            }
        }
        get streams() {
            return pb_1.Message.getRepeatedWrapperField(this, StreamAdapter, 1) as StreamAdapter[];
        }
        set streams(value: StreamAdapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            streams?: ReturnType<typeof StreamAdapter.prototype.toObject>[];
        }): PushRequest {
            const message = new PushRequest({});
            if (data.streams != null) {
                message.streams = data.streams.map(item => StreamAdapter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                streams?: ReturnType<typeof StreamAdapter.prototype.toObject>[];
            } = {};
            if (this.streams != null) {
                data.streams = this.streams.map((item: StreamAdapter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.streams.length)
                writer.writeRepeatedMessage(1, this.streams, (item: StreamAdapter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.streams, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamAdapter.deserialize(reader), StreamAdapter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushRequest {
            return PushRequest.deserialize(bytes);
        }
    }
    export class PushResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PushResponse {
            const message = new PushResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushResponse {
            return PushResponse.deserialize(bytes);
        }
    }
    export class StreamAdapter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            labels?: string;
            entries?: EntryAdapter[];
            hash?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
            }
        }
        get labels() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set labels(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, EntryAdapter, 2) as EntryAdapter[];
        }
        set entries(value: EntryAdapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set hash(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            labels?: string;
            entries?: ReturnType<typeof EntryAdapter.prototype.toObject>[];
            hash?: number;
        }): StreamAdapter {
            const message = new StreamAdapter({});
            if (data.labels != null) {
                message.labels = data.labels;
            }
            if (data.entries != null) {
                message.entries = data.entries.map(item => EntryAdapter.fromObject(item));
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            return message;
        }
        toObject() {
            const data: {
                labels?: string;
                entries?: ReturnType<typeof EntryAdapter.prototype.toObject>[];
                hash?: number;
            } = {};
            if (this.labels != null) {
                data.labels = this.labels;
            }
            if (this.entries != null) {
                data.entries = this.entries.map((item: EntryAdapter) => item.toObject());
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.labels.length)
                writer.writeString(1, this.labels);
            if (this.entries.length)
                writer.writeRepeatedMessage(2, this.entries, (item: EntryAdapter) => item.serialize(writer));
            if (this.hash != 0)
                writer.writeUint64(3, this.hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamAdapter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamAdapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.labels = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EntryAdapter.deserialize(reader), EntryAdapter));
                        break;
                    case 3:
                        message.hash = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamAdapter {
            return StreamAdapter.deserialize(bytes);
        }
    }
    export class LabelPairAdapter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: string;
        }): LabelPairAdapter {
            const message = new LabelPairAdapter({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LabelPairAdapter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LabelPairAdapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LabelPairAdapter {
            return LabelPairAdapter.deserialize(bytes);
        }
    }
    export class EntryAdapter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: dependency_1.google.protobuf.Timestamp;
            line?: string;
            structuredMetadata?: LabelPairAdapter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("structuredMetadata" in data && data.structuredMetadata != undefined) {
                    this.structuredMetadata = data.structuredMetadata;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set line(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get structuredMetadata() {
            return pb_1.Message.getRepeatedWrapperField(this, LabelPairAdapter, 3) as LabelPairAdapter[];
        }
        set structuredMetadata(value: LabelPairAdapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            line?: string;
            structuredMetadata?: ReturnType<typeof LabelPairAdapter.prototype.toObject>[];
        }): EntryAdapter {
            const message = new EntryAdapter({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.structuredMetadata != null) {
                message.structuredMetadata = data.structuredMetadata.map(item => LabelPairAdapter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                line?: string;
                structuredMetadata?: ReturnType<typeof LabelPairAdapter.prototype.toObject>[];
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.structuredMetadata != null) {
                data.structuredMetadata = this.structuredMetadata.map((item: LabelPairAdapter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.line.length)
                writer.writeString(2, this.line);
            if (this.structuredMetadata.length)
                writer.writeRepeatedMessage(3, this.structuredMetadata, (item: LabelPairAdapter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntryAdapter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntryAdapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.line = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.structuredMetadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, LabelPairAdapter.deserialize(reader), LabelPairAdapter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntryAdapter {
            return EntryAdapter.deserialize(bytes);
        }
    }
}
